C
C Set the constant parameters
C
#include "CONSTANTS.H"
#include "LEINDEX.H"
#include "RSINDEX.H"

        subroutine RSSETF(
     &    CHF_CONST_REAL[ar0],
     &    CHF_CONST_REAL[ax0],
     &    CHF_CONST_REAL[ay0],
     &    CHF_CONST_REAL[ansig],
     &    CHF_CONST_REAL[antime],
     &    CHF_CONST_REAL[aRSa],
     &    CHF_CONST_REAL[aRSb],
     &    CHF_CONST_REAL[aRSV0],
     &    CHF_CONST_REAL[aRSf0],
     &    CHF_CONST_REAL[aRSL],
     &    CHF_CONST_REAL[aRSfw],
     &    CHF_CONST_REAL[aRSVw],
     &    CHF_CONST_REAL[afExp],
     &    CHF_CONST_REAL[aruptureThreshold])

#include "RSCommon.fh"

c
c       simulation parameters
c

        r0      = ar0
        x0      = ax0
        y0      = ay0
        nsig    = ansig
        nucTime = antime
        rs_a    = aRSa
        rs_b    = aRSb
        rs_V0   = aRSV0
        rs_f0   = aRSf0
        rs_L    = aRSL
        rs_fw   = aRSfw
        rs_Vw   = aRSVw
        rs_fExp = afExp
        ruptureThreshold = aruptureThreshold

        return
        end


C
C Set the data on the boundary
C
        subroutine RSSETBND(
     &    CHF_FRA[Bout],
     &    CHF_BOX[box],
     &    CHF_CONST_FRA[Bin],
     &    CHF_CONST_FRA[U],
     &    CHF_CONST_REAL[dt],
     &    CHF_CONST_REAL[dx],
     &    CHF_CONST_REAL[time])

#include "RSCommon.fh"

        integer CHF_DDECL[i;j;k]
        real_t Vx, Vz, V, psi, fss, f,tau_xy_0,tau_yz_0
        real_t c_rs_a, c_rs_Vw
        real_t CHF_DDECL[x;y;z]

        CHF_MULTIDO[box;i;j;k]
           CHF_DTERM[
           x   = (i + half) * dx - x0;
           y   = (j + half) * dx - y0;
           z   = (k + half) * dx - z0]

           call GAUSSIANFUNC(tau_xy_0,r0,x)
           tau_xy_0 = nsig*tau_xy_0
           tau_yz_0 = 0d0


           c_rs_a  = rs_a+0.008d0*max(0d0,min(1d0,-(x+6d0)/6d0))
           c_rs_Vw = rs_Vw+5d0*max(0d0,-(x+6d0)/6d0)


C          Only south face slip velocity
           Vx = U(CHF_IX[i;j;k],IX1_VX) - U(CHF_IX[i;j;k],IX2_VX)
           Vz = U(CHF_IX[i;j;k],IX1_VZ) - U(CHF_IX[i;j;k],IX2_VZ)
           V  = SQRT(Vx**2 + Vz**2)

C          ORDER MUST MATCH WHAT IN RSIBC.CPP!!!!
C          Vx
           Bout(CHF_IX[i;j;k],RX_VX) = Vx
C          Vz
           Bout(CHF_IX[i;j;k],RX_VZ) = Vz
C          V
           Bout(CHF_IX[i;j;k],RX_V) = V
C          sxy
           Bout(CHF_IX[i;j;k],RX_SXY) = U(CHF_IX[i;j;k],IX_SXY)+tau_xy_0
C          syz
           Bout(CHF_IX[i;j;k],RX_SYZ) = U(CHF_IX[i;j;k],IX_SYZ)+tau_yz_0
C          slip_x
           Bout(CHF_IX[i;j;k],RX_DX) = Bin(CHF_IX[i;j;k],RX_DX) + dt*Vx
C          slip_z
           Bout(CHF_IX[i;j;k],RX_DZ) = Bin(CHF_IX[i;j;k],RX_DZ) + dt*Vz
C          slip_total
           Bout(CHF_IX[i;j;k],RX_DT) = Bin(CHF_IX[i;j;k],RX_DT) + dt*V
C          rupture
           if (Bin(CHF_IX[i;j;k],RX_RT) .gt. time .and.
     &                                V .gt. ruptureThreshold) then
             Bout(CHF_IX[i;j;k],RX_RT) = time
           endif
C          syy
           Bout(CHF_IX[i;j;k],RX_SYY)  = U(CHF_IX[i;j;k],IX_SYY)
C          psi
           psi = Bin(CHF_IX[i;j;k],RX_PSI)
           f   = c_rs_a*asinh(V*exp(psi/c_rs_a)/(2.0d0*rs_V0))
           fss = rs_f0 - (rs_b - c_rs_a)*log(V / rs_V0)
           if(rs_fExp > 0d0) then
               fss = rs_fw + (fss - rs_fw)/((1d0 + (V/c_rs_Vw)**8)**(0.125d0))
           endif
           Bout(CHF_IX[i;j;k],RX_PSI) = psi - dt * (V / rs_L)*(f - fss)
           ! print*,psi,Bout(CHF_IX[i;j;k],RX_PSI),V,IX1_VX,IX2_VX
           ! print *,i,psi,V,f,fss

        CHF_ENDDO
        
        return
        end


C
C Set the the boundary flux for a simple fault which is governed by an
C arcsinh friction law with a time-space dependent normal stress.
C
        subroutine RSFAULTBCF(
     &    CHF_FRA[Wgdnv],
     &    CHF_CONST_FRA[WInside],
     &    CHF_CONST_FRA[W],
     &    CHF_CONST_FRA1[GPsi],
     &    CHF_CONST_INT[lohisign],
     &    CHF_CONST_REAL[dx],
     &    CHF_CONST_REAL[t],
     &    CHF_CONST_INT[idir],
     &    CHF_BOX[box])

#include "IBCCommon.fh"
#include "RSCommon.fh"

        integer CHF_DDECL[i;j;k]
        integer ip
        real_t CHF_DDECL[x;y;z]
        real_t CHF_DDECL[xhi;yhi;zhi]
        real_t CHF_DDECL[ax;ay;az]

        real_t wpxy1,wpyy1,wpyz1
        real_t wmxy1,wmyy1,wmyz1
        real_t wpxy2,wpyy2,wpyz2
        real_t wmxy2,wmyy2,wmyz2
        real_t vx1,vy1,vz1,sxx1,syy1,szz1,sxy1,sxz1,syz1
        real_t vx2,vy2,vz2,sxx2,syy2,szz2,sxy2,sxz2,syz2

        real_t SHF, tau, fric, V, tau_xy_0, tau_yz_0, psi,Vx,Vz,c_rs_a

        real_t phi_xy,phi_yz,phi

        CHF_MULTIDO[box;i;j;k]
           CHF_DTERM[
           x   = (i + half) * dx - x0;
           y   = (j + half) * dx - y0;
           z   = (k + half) * dx - z0]
 
C          Get psi
           psi = GPsi(CHF_IX[i;j;k])

C          Get the values on side 1
           vx1  = WInside(CHF_IX[i;j;k],IX1_VX )
           vy1  = WInside(CHF_IX[i;j;k],IX1_VY )
           vz1  = WInside(CHF_IX[i;j;k],IX1_VZ )
           sxx1 = WInside(CHF_IX[i;j;k],IX1_SXX)
           syy1 = WInside(CHF_IX[i;j;k],IX1_SYY)
           szz1 = WInside(CHF_IX[i;j;k],IX1_SZZ)
           sxy1 = WInside(CHF_IX[i;j;k],IX1_SXY)
           sxz1 = WInside(CHF_IX[i;j;k],IX1_SXZ)
           syz1 = WInside(CHF_IX[i;j;k],IX1_SYZ)

C          Get the values on side 2
           vx2  = WInside(CHF_IX[i;j;k],IX2_VX )
           vy2  = WInside(CHF_IX[i;j;k],IX2_VY )
           vz2  = WInside(CHF_IX[i;j;k],IX2_VZ )
           sxx2 = WInside(CHF_IX[i;j;k],IX2_SXX)
           syy2 = WInside(CHF_IX[i;j;k],IX2_SYY)
           szz2 = WInside(CHF_IX[i;j;k],IX2_SZZ)
           sxy2 = WInside(CHF_IX[i;j;k],IX2_SXY)
           sxz2 = WInside(CHF_IX[i;j;k],IX2_SXZ)
           syz2 = WInside(CHF_IX[i;j;k],IX2_SYZ)

C          Get the characteristic propagating into the fault

           wpxy1 = -sxy1 - Zs * vx1
           wpyy1 = -syy1 - Zp * vy1
           wpyz1 = -syz1 - Zs * vz1

           wpxy2 =  sxy2 - Zs * vx2
           wpyy2 =  syy2 - Zp * vy2
           wpyz2 =  syz2 - Zs * vz2

           wpyz1 = 0d0
           wpyz2 = 0d0

C          set the perturbation due to nucleation
           call GAUSSIANFUNC(tau_xy_0,r0,x)
           ! print*,nsig,r0
           tau_xy_0 = nsig*tau_xy_0
           ! tau_xy_0 = 0d0
           tau_yz_0 = 0d0
           phi_xy   = half*(wpxy2-wpxy1) + tau_xy_0
           phi_yz   = half*(wpyz2-wpyz1) + tau_yz_0
           ! print *,i,phi_yz,syz1,vz1,syz2,vz2
           phi      = sqrt(phi_xy**2 + phi_yz**2)



C          find the normal stress
           syy1   = -(wpyy1-wpyy2)/2.0d0
           syy2   = -(wpyy1-wpyy2)/2.0d0

           vy1   = -(wpyy1+wpyy2)/2.0d0/Zp
           vy2   = -(wpyy1+wpyy2)/2.0d0/Zp
           ! vy1    = -(syy1 + wpyy1)/Zp
           ! vy2    = -(syy1 + wpyy1)/Zp

C          Use the newton solver to find the slip velocity and shear
C          strength

C          We use the fact that 
C             \vec{\tau} = \vec{phi} - \frac{\tilde{Z}_{S} \vec{V}
C          which since \vec{\tau} = \alpha \vec{V} implies they are
C          parallel with \vec{phi} as well. So we can use this to split
C          tau (magnitude) into tau_xy and tau_yz
C 
C          phi_xy = (wpxy2*Zs1-wpxy1*Zs2)/(Zs1+Zs2)
C          phi_yz = (wpyz2*Zs1-wpyz1*Zs2)/(Zs1+Zs2)

           V = sqrt((vx1-vx2)**2 + (vz1-vz2)**2)

           c_rs_a  = rs_a+0.008d0*max(0d0,min(1d0,-(x+6d0)/6d0))
           CALL RSNEWTON(phi,psi,-syy1,c_rs_a,V,tau)
           ! tau = phi
           ! print *,i,phi,psi,-syy1,tau,V

           sxy1   = (phi_xy/phi) * tau - tau_xy_0
           syz1   = (phi_yz/phi) * tau - tau_yz_0
           ! Vx     = (phi_xy/phi) * V
           ! Vz     = (phi_yz/phi) * V

           vx1    = -(sxy1 + wpxy1)/Zs
           vz1    = -(syz1 + wpyz1)/Zs

           SHF = -(vy1 - syy1) * lam / (lam + 2.0d0 * G)

           Wgdnv(CHF_IX[i;j;k],IX1_VX ) = vx1
           Wgdnv(CHF_IX[i;j;k],IX1_VY ) = vy1
           Wgdnv(CHF_IX[i;j;k],IX1_VZ ) = vz1
           Wgdnv(CHF_IX[i;j;k],IX1_SXX) = sxx1 + SHF
           Wgdnv(CHF_IX[i;j;k],IX1_SYY) = syy1
           Wgdnv(CHF_IX[i;j;k],IX1_SZZ) = szz1 + SHF
           Wgdnv(CHF_IX[i;j;k],IX1_SXY) = sxy1
           Wgdnv(CHF_IX[i;j;k],IX1_SXZ) = sxz1
           Wgdnv(CHF_IX[i;j;k],IX1_SYZ) = syz1
           Wgdnv(CHF_IX[i;j;k],IX1_GAM) = 0d0
           Wgdnv(CHF_IX[i;j;k],IX1_LAM) = 0d0

           sxy2   = (phi_xy/phi) * tau - tau_xy_0
           syz2   = (phi_yz/phi) * tau - tau_yz_0

           vx2    = (sxy2 - wpxy2)/Zs
           vz2    = (syz2 - wpyz2)/Zs
           ! vx2    = vx1 - Vx
           ! vz2    = vz1 - Vz

           SHF = -(vy2 - syy2) * lam / (lam + 2.0d0 * G)

           Wgdnv(CHF_IX[i;j;k],IX2_VX ) = vx2
           Wgdnv(CHF_IX[i;j;k],IX2_VY ) = vy2
           Wgdnv(CHF_IX[i;j;k],IX2_VZ ) = vz2
           Wgdnv(CHF_IX[i;j;k],IX2_SXX) = sxx2 + SHF
           Wgdnv(CHF_IX[i;j;k],IX2_SYY) = syy2
           Wgdnv(CHF_IX[i;j;k],IX2_SZZ) = szz2 + SHF
           Wgdnv(CHF_IX[i;j;k],IX2_SXY) = sxy2
           Wgdnv(CHF_IX[i;j;k],IX2_SXZ) = sxz2
           Wgdnv(CHF_IX[i;j;k],IX2_SYZ) = syz2
           Wgdnv(CHF_IX[i;j;k],IX2_GAM) = 0d0
           Wgdnv(CHF_IX[i;j;k],IX2_LAM) = 0d0
           ! print*,vx1,vx2

       CHF_ENDDO

        return
        end

C
C Set the the boundary flux for a simple fault which is governed by an
C arcsinh friction law with a time-space dependent normal stress.
C
C We need to solve \vec{tau} = \vec{phi}- Zs \vec{V}, where \vec{phi} = (wmxy,wmyz)^T}
C Since V, phi, tau are parallel we solve tau = phi - Zs V (all
C magnitude not vec) then set \vec{tau} = tau \vec{phi}/phi and
C similarly for \vec{V} = V \vec{V}/V
C
C Bracket is formed by (0,phi/Zs)
C
        subroutine RSNEWTON(
     &    CHF_CONST_REAL[phi],
     &    CHF_CONST_REAL[psi],
     &    CHF_CONST_REAL[sn],
     &    CHF_CONST_REAL[c_rs_a],
     &    CHF_REAL[V],
     &    CHF_REAL[tau])

#include "IBCCommon.fh"
#include "RSCommon.fh"

        real_t alpha, beta
        real_t Vmin,Vmax,dV
        real_t dfval,fval
        real_t atolG,atolV,rtolV,eta
        integer i,IMAX
        rtolV=0d0
        atolV=0d0
        atolG=epsilon(1d0)*1d4

        IMAX = 100


        Vmin = 0
        Vmax = phi / Zs
        if ( V .lt. Vmin .or. V .gt. Vmax) then
            V = (Vmin + Vmax) / 2.0d0
        endif

        alpha = sn * c_rs_a
        beta  = exp(psi / c_rs_a) / (2.0d0 * rs_V0)
        eta = 0.5d0*Zs

        fval  = alpha * asinh(beta * V) + eta * V - phi

        do i = 1,IMAX
            if ( fval .lt. 0) then
                Vmin = V
            else
                Vmax = V
            endif

C           evaluate the functions
            dfval = alpha * beta / sqrt(beta**2 * V**2 + 1) + eta

C           Guess the change
            dV = -fval / dfval
            V  = V + dV

C           Verify that we satisfy the bracket
            if ( V .lt. Vmin .or. V .gt. Vmax) then
                V = (Vmin + Vmax) / 2.0d0
            endif

            fval  = alpha * asinh(beta * V) + eta * V - phi
            ! if ( abs(fval) .lt. atol .or. abs(dV) .lt. atol) then
            if (abs(fval)<=atolG) exit

            if (abs(dV)<=atolV+rtolV*(abs(V)+abs(dV))) exit
        enddo


        tau = alpha * asinh(beta * V)

        return
        end
