C
C Set the constant parameters
C
#include "CONSTANTS.H"

        subroutine SWSETF(
     &    CHF_CONST_REAL[afs],
     &    CHF_CONST_REAL[afd],
     &    CHF_CONST_REAL[adw],
     &    CHF_CONST_VR[anpatch],
     &    CHF_CONST_REAL[awidth])

#include "SWCommon.fh"

c
c       simulation parameters
c

        integer iv
        fs = afs
        fd = afd
        dw = adw
        smWidth = awidth
        CHF_DTERM[
        npatch(0) = anpatch(0)
        npatch(1) = anpatch(1)
        r(0) = half * (npatch(0) + npatch(1))
        l(0) = half * (npatch(1) - npatch(0))
        ;;
        npatch(2) = anpatch(2)
        npatch(3) = anpatch(3)
        r(1) = half * (npatch(2) + npatch(3))
        l(1) = half * (npatch(3) - npatch(2))
        ]

        return
        end



C
C This is a constant initial data
C
        subroutine SWINITF(
     &    CHF_FRA[U],
     &    CHF_CONST_REAL[dx],
     &    CHF_BOX[box])

#include "IBCCommon.fh"

        integer CHF_DDECL[i;j;k]
        real_t CHF_DDECL[x;y;z]

        CHF_MULTIDO[box;i;j;k]

          U(CHF_IX[i;j;k],0) = background(0)
          U(CHF_IX[i;j;k],1) = background(1)
          U(CHF_IX[i;j;k],2) = background(2)
          U(CHF_IX[i;j;k],3) = background(3)
          U(CHF_IX[i;j;k],4) = background(4)
          U(CHF_IX[i;j;k],5) = background(5)
          U(CHF_IX[i;j;k],6) = background(6)
          U(CHF_IX[i;j;k],7) = background(7)
          U(CHF_IX[i;j;k],8) = background(8)

        CHF_ENDDO
        
        return
        end

C
C This is a constant initial data
C
        subroutine SWSETBND(
     &    CHF_FRA[B],
     &    CHF_BOX[box],
     &    CHF_CONST_FRA[U],
     &    CHF_CONST_REAL[dt],
     &    CHF_CONST_REAL[time])

        integer CHF_DDECL[i;j;k]

        CHF_MULTIDO[box;i;j;k]

C         Only south face slip velocity
C         Vx
          B(CHF_IX[i;j;k],0) = 2*U(CHF_IX[i;j;k],0)
C         Vz
          B(CHF_IX[i;j;k],1) = 2*U(CHF_IX[i;j;k],2)
C         sxy
          B(CHF_IX[i;j;k],2) =   U(CHF_IX[i;j;k],6)
C         syz
          B(CHF_IX[i;j;k],3) =   U(CHF_IX[i;j;k],8)
C         dx
          B(CHF_IX[i;j;k],4) = B(CHF_IX[i;j;k],4) + dt*abs(B(CHF_IX[i;j;k],0))
C         dz
          B(CHF_IX[i;j;k],5) = B(CHF_IX[i;j;k],5) + dt*abs(B(CHF_IX[i;j;k],1))
C         rupture
          if (B(CHF_IX[i;j;k],0)**2 + B(CHF_IX[i;j;k],1)**2 .lt. 1e-12) then
            B(CHF_IX[i;j;k],6) = time
          endif

        CHF_ENDDO
        
        return
        end


C
C Set the the boundary flux for a simple fault which is governed by an
C slipweakening friction law
C
        subroutine SWFAULTBCF(
     &    CHF_FRA[Wgdnv],
     &    CHF_CONST_FRA[WInside],
     &    CHF_CONST_FRA[W],
     &    CHF_CONST_INT[lohisign],
     &    CHF_CONST_REAL[dx],
     &    CHF_CONST_REAL[t],
     &    CHF_CONST_INT[idir],
     &    CHF_CONST_FRA[B],
     &    CHF_CONST_INT[numPatches],
     &    CHF_CONST_VR[xcPatches],
     &    CHF_CONST_VR[xwPatches],
     &    CHF_CONST_VR[zcPatches],
     &    CHF_CONST_VR[zwPatches],
     &    CHF_CONST_VR[tauPatches],
     &    CHF_BOX[box])

#include "IBCCommon.fh"
#include "SWCommon.fh"

        integer CHF_DDECL[i;j;k]
        integer ip
        real_t CHF_DDECL[x;y;z]
        real_t CHF_DDECL[xlo;ylo;zlo]
        real_t CHF_DDECL[xhi;yhi;zhi]
        real_t CHF_DDECL[ax;ay;az]

        real_t wpxy,wpyy,wpyz
        real_t wmxy,wmyy,wmyz
        real_t vx,vy,vz,sxx,syy,szz,sxy,sxz,syz
        real_t SHF, tau, fric, V, tau_0, beta, tau_p, valx, valz
        real_t width
c       width = 12.0d0*dx
        width = smWidth
        fric = 1d0
        CHF_MULTIDO[box;i;j;k]
          CHF_DTERM[
          x   = (i + half) * dx
          xlo = (i       ) * dx
          xhi = (i + one ) * dx;
          y   = (j + half) * dx
          ylo = (j       ) * dx
          yhi = (j + one ) * dx;
          z   = (k + half) * dx
          zlo = (k       ) * dx
          zhi = (k + one ) * dx]

          tau_p = 0

          vx  = WInside(CHF_IX[i;j;k],0)
          vy  = WInside(CHF_IX[i;j;k],1)
          vz  = WInside(CHF_IX[i;j;k],2)
          sxx = WInside(CHF_IX[i;j;k],3)
          syy = WInside(CHF_IX[i;j;k],4)
          szz = WInside(CHF_IX[i;j;k],5)
          sxy = WInside(CHF_IX[i;j;k],6)
          sxz = WInside(CHF_IX[i;j;k],7)
          syz = WInside(CHF_IX[i;j;k],8)

C         We assume that the boundary is on the bottom

          wmxy = sxy + Zs * vx
          wmyy = syy + Zp * vy
          wmyz = syz + Zs * vz

C         assume that the fault is locked
          tau_p = zero
          do ip = 0,numPatches-1
            CHF_DTERM[
            call SMOOTHFUNC(valx,width, abs(x-xcPatches(ip))-xwPatches(ip)+half*width)
            ;;
            call SMOOTHFUNC(valz,width, abs(z-zcPatches(ip))-zwPatches(ip)+half*width)
            ]
c           CHF_DTERM[
c           call BOXCARFUNC(valx,l(0), abs(x-r(0)))
c           ;;
c           call BOXCARFUNC(valz,l(1), abs(z-r(1)))
c           ]
            tau_p = tau_p + tauPatches(ip) * CHF_DTERM[valx;;*valz]
          enddo

          tau   = sqrt((wmxy+tau_p)**2 + wmyz**2)

          syy   = background(4)
c         fric  = min(fs,max(fd,fd+(1-B(CHF_IX[i;j;k],2)/dw)*(fs-fd)))

          CHF_DTERM[
          call SMOOTHFUNC(valx,width,abs(x-16.0d0)-15.0d0+half*width)
          ;;
          call SMOOTHFUNC(valz,width,abs(z-16.0d0)-15.0d0+half*width)
          ]
          fric  = fs*CHF_DTERM[valx;;*valz] + (1-CHF_DTERM[valx;;*valz])*10000
          fric  = min(fric,max(fd,fd+(1-SQRT(B(CHF_IX[i;j;k],4)**2 + B(CHF_IX[i;j;k],5)**2)/dw)*(fric-fd)))

          tau_0 = min(tau,-syy*fric)

          beta  = 2.0d0 * tau_0 / tau - 1.0d0

          wpxy = wmxy * beta
          wpyz = wmyz * beta

          vy  = (wmyy - syy) / Zp
          SHF = -(vy - syy) * lam / (lam + 2.0d0 * mu)
          Wgdnv(CHF_IX[i;j;k],0) = (wmxy - wpxy) / (2.0d0 * Zs)
          Wgdnv(CHF_IX[i;j;k],1) = vy
          Wgdnv(CHF_IX[i;j;k],2) = (wmyz - wpyz) / (2.0d0 * Zs)
          Wgdnv(CHF_IX[i;j;k],3) = syy + SHF
          Wgdnv(CHF_IX[i;j;k],4) = syy
          Wgdnv(CHF_IX[i;j;k],5) = szz + SHF
          Wgdnv(CHF_IX[i;j;k],6) = (wmxy + wpxy) / (2.0d0)
          Wgdnv(CHF_IX[i;j;k],7) = sxz
          Wgdnv(CHF_IX[i;j;k],8) = (wmyz + wpyz) / (2.0d0)
       CHF_ENDDO

        return
        end
