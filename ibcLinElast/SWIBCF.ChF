C
C Set the constant parameters
C
#include "CONSTANTS.H"

        subroutine SWSETF(
     &    CHF_CONST_REAL[afs],
     &    CHF_CONST_REAL[afd],
     &    CHF_CONST_REAL[adw],
     &    CHF_CONST_REAL[asmValue],
     &    CHF_CONST_REAL[aruptureThreshold])

#include "SWCommon.fh"

c
c       simulation parameters
c

        integer iv
        fs = afs
        fd = afd
        dw = adw
        smValue = asmValue
        ruptureThreshold = aruptureThreshold

        return
        end

C
C Set the data on the boundary
C
        subroutine SWSETBND(
     &    CHF_FRA[Bout],
     &    CHF_BOX[box],
     &    CHF_CONST_FRA[Bin],
     &    CHF_CONST_FRA[U],
     &    CHF_CONST_REAL[dt],
     &    CHF_CONST_REAL[time])

#include "SWCommon.fh"

        integer CHF_DDECL[i;j;k]

        CHF_MULTIDO[box;i;j;k]

C         Only south face slip velocity
C         Vx
          Bout(CHF_IX[i;j;k],0) = U(CHF_IX[i;j;k],0) - U(CHF_IX[i;j;k],9)
C         Vz
          Bout(CHF_IX[i;j;k],1) = U(CHF_IX[i;j;k],2) - U(CHF_IX[i;j;k],11)
C         sxy
          Bout(CHF_IX[i;j;k],2) = U(CHF_IX[i;j;k],6)
C         syz
          Bout(CHF_IX[i;j;k],3) = U(CHF_IX[i;j;k],8)
C         V
          Bout(CHF_IX[i;j;k],4) = SQRT((Bout(CHF_IX[i;j;k],0)**2 + Bout(CHF_IX[i;j;k],1)**2))
C         slip
          Bout(CHF_IX[i;j;k],5) = Bin(CHF_IX[i;j;k],5) + dt*Bout(CHF_IX[i;j;k],0)
C         slip
          Bout(CHF_IX[i;j;k],6) = Bin(CHF_IX[i;j;k],6) + dt*Bout(CHF_IX[i;j;k],1)
C         slip
          Bout(CHF_IX[i;j;k],7) = Bin(CHF_IX[i;j;k],7) + dt*Bout(CHF_IX[i;j;k],4)
C         rupture
          if (Bin(CHF_IX[i;j;k],8) .gt. time .and.
     &        Bin(CHF_IX[i;j;k],4) .gt. ruptureThreshold) then
            Bout(CHF_IX[i;j;k],8) = time
          endif

        CHF_ENDDO
        
        return
        end


C
C Set the the boundary flux for a simple fault which is governed by an
C slipweakening friction law
C
        subroutine SWFAULTBCF(
     &    CHF_FRA[Wgdnv],
     &    CHF_CONST_FRA[WInside],
     &    CHF_CONST_FRA[W],
     &    CHF_CONST_INT[lohisign],
     &    CHF_CONST_REAL[dx],
     &    CHF_CONST_REAL[t],
     &    CHF_CONST_INT[idir],
     &    CHF_CONST_FRA[B],
     &    CHF_CONST_INT[numPatches],
     &    CHF_CONST_VR[xcPatches],
     &    CHF_CONST_VR[xwPatches],
     &    CHF_CONST_VR[zcPatches],
     &    CHF_CONST_VR[zwPatches],
     &    CHF_CONST_VR[tauPatches],
     &    CHF_CONST_VR[fricBoxCenter],
     &    CHF_CONST_VR[fricBoxWidth],
     &    CHF_CONST_REAL[outsideFriction],
     &    CHF_BOX[box])

#include "IBCCommon.fh"
#include "SWCommon.fh"

        integer CHF_DDECL[i;j;k]
        integer ip
        real_t CHF_DDECL[x;y;z]
        real_t CHF_DDECL[xhi;yhi;zhi]
        real_t CHF_DDECL[ax;ay;az]

        real_t wpxy1,wpyy1,wpyz1
        real_t wmxy1,wmyy1,wmyz1
        real_t wpxy2,wpyy2,wpyz2
        real_t wmxy2,wmyy2,wmyz2
        real_t vx1,vy1,vz1,sxx1,syy1,szz1,sxy1,sxz1,syz1
        real_t vx2,vy2,vz2,sxx2,syy2,szz2,sxy2,sxz2,syz2

        real_t SHF, tau, fric, V, tau_0, beta, valx, valz

        real_t tau_lock
        real_t phi_xy,phi_yz,phi
        real_t r

        CHF_MULTIDO[box;i;j;k]
          CHF_DTERM[
          x   = (i + half) * dx - fricBoxCenter(0);
          y   = (j + half) * dx;
          z   = (k + half) * dx - fricBoxCenter(1)]

C         Get the values on side 1
          vx1  = WInside(CHF_IX[i;j;k],0)
          vy1  = WInside(CHF_IX[i;j;k],1)
          vz1  = WInside(CHF_IX[i;j;k],2)
          sxx1 = WInside(CHF_IX[i;j;k],3)
          syy1 = WInside(CHF_IX[i;j;k],4)
          szz1 = WInside(CHF_IX[i;j;k],5)
          sxy1 = WInside(CHF_IX[i;j;k],6)
          sxz1 = WInside(CHF_IX[i;j;k],7)
          syz1 = WInside(CHF_IX[i;j;k],8)

C         Get the values on side 1
          vx2  = WInside(CHF_IX[i;j;k],9 + 0)
          vy2  = WInside(CHF_IX[i;j;k],9 + 1)
          vz2  = WInside(CHF_IX[i;j;k],9 + 2)
          sxx2 = WInside(CHF_IX[i;j;k],9 + 3)
          syy2 = WInside(CHF_IX[i;j;k],9 + 4)
          szz2 = WInside(CHF_IX[i;j;k],9 + 5)
          sxy2 = WInside(CHF_IX[i;j;k],9 + 6)
          sxz2 = WInside(CHF_IX[i;j;k],9 + 7)
          syz2 = WInside(CHF_IX[i;j;k],9 + 8)

          ! vx2  = -vx1
          ! vy2  =  vy1
          ! vz2  = -vz1
          ! syy2 = syy1
          ! sxy2 = sxy1
          ! syz2 = syz1

C         Get the characteristic propagating into the fault

          wpxy1 = -sxy1 - Zs * vx1
          wpyy1 = -syy1 - Zp * vy1
          wpyz1 = -syz1 - Zs * vz1

          wpxy2 =  sxy2 - Zs * vx2
          wpyy2 =  syy2 - Zp * vy2
          wpyz2 =  syz2 - Zs * vz2

C         set the perturbation
          tau_0 = 0
          do ip = 0,numPatches-1
            CHF_DTERM[
c           call BOXCARFUNC(valx,xwPatches(ip), abs(x-xcPatches(ip)))
c           call SMOOTHBOXCAR(valx,xwPatches(ip),abs(x-xcPatches(ip)),smValue)
c           call GAUSSIANFUNC(valx,xwPatches(ip),abs(x-xcPatches(ip)))
            call SMOOTHFUNC(valx,smValue,abs(x-xcPatches(ip))-xwPatches(ip))
            ;;
c           call BOXCARFUNC(valz,zwPatches(ip), abs(z-zcPatches(ip)))
c           call SMOOTHBOXCAR(valz,zwPatches(ip),abs(z-zcPatches(ip)),smValue)
c           call GAUSSIANFUNC(valz,zwPatches(ip),abs(z-zcPatches(ip)))
            call SMOOTHFUNC(valz,smValue,abs(z-zcPatches(ip))-zwPatches(ip))
            ]
            tau_0 = tau_0 + tauPatches(ip) * CHF_DTERM[valx;;*valz]
          enddo

C         Find tau_0
          tau_lock = sqrt((half*(wpxy2-wpxy1)+tau_0)**2 + (half*(wpyz2-wpyz1))**2)



C         find the normal stress
          syy1   = -(wpyy1-wpyy2)/2.0d0
          syy2   = -(wpyy1-wpyy2)/2.0d0
          ! syy1   = background(4)
          ! syy2   = background(4)

          vy1   = -(wpyy1+wpyy2)/2.0d0/Zp
          vy2   = -(wpyy1+wpyy2)/2.0d0/Zp
          ! vy1    = -(syy1 + wpyy1)/Zp
          ! vy2    = -(syy1 + wpyy1)/Zp

C         figure out the static stress value
          CHF_DTERM[
          call BOXCARFUNC(valx,fricBoxWidth(0),abs(x))
          ;;
          call BOXCARFUNC(valz,fricBoxWidth(1),abs(z))
          ]
          fric  = fs*CHF_DTERM[valx;;*valz] + (1-CHF_DTERM[valx;;*valz])*outsideFriction

C         Apply slip weakening friction
          fric  = fric-(fric-fd)*min(one,B(CHF_IX[i;j;k],7)/dw)

C         strengh is minimum of friction strength and forced strength
          tau = min(tau_lock,-syy1*fric)-tau_0

C         set stress and slip velocity
C         tau = min(tau_lock,tau_0)

C         We use the fact that 
C            \vec{\tau} = \vec{phi} - \frac{\tilde{Z}_{S} \vec{V}
C         which since \vec{\tau} = \alpha \vec{V} implies they are
C         parallel with \vec{phi} as well. So we can use this to split
C         tau (magnitude) into tau_xy and tau_yz

C         phi_xy = (wpxy2*Zs1-wpxy1*Zs2)/(Zs1+Zs2)
C         phi_yz = (wpyz2*Zs1-wpyz1*Zs2)/(Zs1+Zs2)

          phi_xy = half*(wpxy2-wpxy1)
          phi_yz = half*(wpyz2-wpyz1)
          phi    = sqrt(phi_xy**2 + phi_yz**2)

          sxy1   = (phi_xy/phi) * tau
          syz1   = (phi_yz/phi) * tau

          vx1    = -(sxy1 + wpxy1)/Zs
          vz1    = -(syz1 + wpyz1)/Zs

          SHF = -(vy1 - syy1) * lam / (lam + 2.0d0 * mu)

          Wgdnv(CHF_IX[i;j;k],0) = vx1
          Wgdnv(CHF_IX[i;j;k],1) = vy1
          Wgdnv(CHF_IX[i;j;k],2) = vz1
          Wgdnv(CHF_IX[i;j;k],3) = sxx1 + SHF
          Wgdnv(CHF_IX[i;j;k],4) = syy1
          Wgdnv(CHF_IX[i;j;k],5) = szz1 + SHF
          Wgdnv(CHF_IX[i;j;k],6) = sxy1
          Wgdnv(CHF_IX[i;j;k],7) = sxz1
          Wgdnv(CHF_IX[i;j;k],8) = syz1

          sxy2   = (phi_xy/phi) * tau
          syz2   = (phi_yz/phi) * tau

          vx2    = (sxy2 - wpxy2)/Zs
          vz2    = (syz2 - wpyz2)/Zs

          SHF = -(vy2 - syy2) * lam / (lam + 2.0d0 * mu)

          Wgdnv(CHF_IX[i;j;k],9 + 0) = vx2
          Wgdnv(CHF_IX[i;j;k],9 + 1) = vy2
          Wgdnv(CHF_IX[i;j;k],9 + 2) = vz2
          Wgdnv(CHF_IX[i;j;k],9 + 3) = sxx2 + SHF
          Wgdnv(CHF_IX[i;j;k],9 + 4) = syy2
          Wgdnv(CHF_IX[i;j;k],9 + 5) = szz2 + SHF
          Wgdnv(CHF_IX[i;j;k],9 + 6) = sxy2
          Wgdnv(CHF_IX[i;j;k],9 + 7) = sxz2
          Wgdnv(CHF_IX[i;j;k],9 + 8) = syz2
       CHF_ENDDO

        return
        end
