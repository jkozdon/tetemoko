C
C Set the constant parameters
C
#include "CONSTANTS.H"

        subroutine SIMPLESETF(
     &    CHF_CONST_REAL[ar0],
     &    CHF_CONST_VR[amag],
     &    CHF_CONST_REAL[asig])

#include "SimpleCommon.fh"

c
c       simulation parameters
c

        r0     = ar0
        mag(0) = amag(0)
        mag(1) = amag(1)
        mag(2) = amag(2)
        mag(3) = amag(3)
        mag(4) = amag(4)
        mag(5) = amag(5)
        mag(6) = amag(6)
        mag(7) = amag(7)
        mag(8) = amag(8)
        sig    = asig

        return
        end



C
C This is a very very very simple gaussian pulse initial condition
C
        subroutine SIMPLEINITF(
     &    CHF_FRA[U],
     &    CHF_CONST_REAL[dx],
     &    CHF_BOX[box])

#include "IBCCommon.fh"
#include "SimpleCommon.fh"

        integer CHF_DDECL[i;j;k]
        real_t CHF_DDECL[x;y;z]

        real_t rrs

        CHF_MULTIDO[box;i;j;k]
          CHF_DTERM[
          x = (i + half) * dx - r0;
          y = (j + half) * dx - r0;
          z = (k + half) * dx - r0]

          rrs = (CHF_DTERM[x*x;+y*y;+z*z])/sig
C         rrs = rrs*rrs*rrs*rrs*rrs*rrs*rrs
C         rrs = (x*x) / sig

          U(CHF_IX[i;j;k],0) = background(0) + mag(0) * exp(-rrs)
          U(CHF_IX[i;j;k],1) = background(1) + mag(1) * exp(-rrs)
          U(CHF_IX[i;j;k],2) = background(2) + mag(2) * exp(-rrs)
          U(CHF_IX[i;j;k],3) = background(3) + mag(3) * exp(-rrs)
          U(CHF_IX[i;j;k],4) = background(4) + mag(4) * exp(-rrs)
          U(CHF_IX[i;j;k],5) = background(5) + mag(5) * exp(-rrs)
          U(CHF_IX[i;j;k],6) = background(6) + mag(6) * exp(-rrs)
          U(CHF_IX[i;j;k],7) = background(7) + mag(7) * exp(-rrs)
          U(CHF_IX[i;j;k],8) = background(8) + mag(8) * exp(-rrs)

        CHF_ENDDO

        return
        end
