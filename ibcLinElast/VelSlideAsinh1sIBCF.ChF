C
C Set the constant parameters
C
#include "CONSTANTS.H"

        subroutine VELSLIDEASINH1SSETF(
     &    CHF_CONST_REAL[ar0],
     &    CHF_CONST_REAL[asigma],
     &    CHF_CONST_REAL[antime])

#include "VelSlideAsinh1sCommon.fh"

c
c       simulation parameters
c

        r0 = ar0
        sigma = asigma
        nucTime = antime

        return
        end



C
C This is a very very very simple gaussian pulse initial condition
C
        subroutine VELSLIDEASINH1SINITF(
     &    CHF_FRA[U],
     &    CHF_CONST_REAL[dx],
     &    CHF_BOX[box])

#include "IBCCommon.fh"

        integer CHF_DDECL[i;j;k]
        real_t CHF_DDECL[x;y;z]

        CHF_MULTIDO[box;i;j;k]

          U(CHF_IX[i;j;k],0) = background(0)
          U(CHF_IX[i;j;k],1) = background(1)
          U(CHF_IX[i;j;k],2) = background(2)
          U(CHF_IX[i;j;k],3) = background(3)
          U(CHF_IX[i;j;k],4) = background(4)
          U(CHF_IX[i;j;k],5) = background(5)
          U(CHF_IX[i;j;k],6) = background(6)
          U(CHF_IX[i;j;k],7) = background(7)
          U(CHF_IX[i;j;k],8) = background(8)

        CHF_ENDDO
        
        return
        end


C
C Set the the boundary flux for a simple fault which is governed by an
C arcsinh friction law with a time-space dependent normal stress.
C
        subroutine VELSLIDEASINH1SFAULTBCF(
     &    CHF_FRA[Wgdnv],
     &    CHF_CONST_FRA[WInside],
     &    CHF_CONST_FRA[W],
     &    CHF_CONST_INT[lohisign],
     &    CHF_CONST_REAL[dx],
     &    CHF_CONST_REAL[t],
     &    CHF_CONST_INT[idir],
     &    CHF_BOX[box])

#include "IBCCommon.fh"
#include "VelSlideAsinh1sCommon.fh"

        integer CHF_DDECL[i;j;k]
        real_t CHF_DDECL[x;y;z]

        integer mx,my,mz
        real_t wpxy,wpyy,wpyz
        real_t wmxy,wmyy,wmyz
        real_t SHF
        real_t R, rat
        real_t vx,vy,vz,sxx,syy,szz,sxy,sxz,syz

        wpxy = background(6) - Zs * background(0)
        wpyy = background(4) - Zp * background(1)
        wpyz = background(8) - Zs * background(2)

        wmxy = background(6) + Zs * background(0)
        wmyy = background(4) + Zp * background(1)
        wmyz = background(8) + Zs * background(2)

        CHF_MULTIDO[box;i;j;k]
          CHF_DTERM[x = (abs((i + half) * dx-r0)-t*cs);
          y = 0;
          z = (abs((k + half) * dx-r0)-t*cs)]
          R = (sqrt(CHF_DTERM[x*x;+y*y;+z*z]))/sigma

C          rat = 1.0d0
          rat = 1 - exp( -R * R)
C          rat = 1 - exp( -R * R) * exp(-2.0d0 * (t - 2.0d0) * (t - 2.0d0))


          vx  = WInside(CHF_IX[i;j;k],0)
          vy  = WInside(CHF_IX[i;j;k],1)
          vz  = WInside(CHF_IX[i;j;k],2)
          sxx = WInside(CHF_IX[i;j;k],3)
          syy = WInside(CHF_IX[i;j;k],4)
          szz = WInside(CHF_IX[i;j;k],5)
          sxy = WInside(CHF_IX[i;j;k],6)
          sxz = WInside(CHF_IX[i;j;k],7)
          syz = WInside(CHF_IX[i;j;k],8)

          CALL VELSLIDENEWTON(vx,vy,vz,sxy,rat*syy,syz)

C         We assume that the boundary is on the bottom

          wmxy = sxy + Zs * vx
          wmyy = syy + Zp * vy
          wmyz = syz + Zs * vz

          wpxy = sxy - Zs * vx
          wpyy = syy - Zp * vy
          wpyz = syz - Zs * vz

          syy = (wmyy + wpyy) / (2.0d0)
          vy  = (wmyy - wpyy) / (2.0d0 * Zp)
          SHF = -(vy - syy) * lam / (lam + 2.0d0 * mu)
          Wgdnv(CHF_IX[i;j;k],0) = (wmxy - wpxy) / (2.0d0 * Zs)
          Wgdnv(CHF_IX[i;j;k],1) = vy
          Wgdnv(CHF_IX[i;j;k],2) = (wmyz - wpyz) / (2.0d0 * Zs)
          Wgdnv(CHF_IX[i;j;k],3) = syy + SHF
          Wgdnv(CHF_IX[i;j;k],4) = syy
          Wgdnv(CHF_IX[i;j;k],5) = szz + SHF
          Wgdnv(CHF_IX[i;j;k],6) = (wmxy + wpxy) / (2.0d0)
          Wgdnv(CHF_IX[i;j;k],7) = sxz
          Wgdnv(CHF_IX[i;j;k],8) = (wmyz + wpyz) / (2.0d0)
C          Wgdnv(CHF_IX[i;j;k],0) = background(0)
C          Wgdnv(CHF_IX[i;j;k],1) = background(1)
C          Wgdnv(CHF_IX[i;j;k],2) = background(2)
C          Wgdnv(CHF_IX[i;j;k],3) = background(3)
C          Wgdnv(CHF_IX[i;j;k],4) = background(4)
C          Wgdnv(CHF_IX[i;j;k],5) = background(5)
C          Wgdnv(CHF_IX[i;j;k],6) = background(6)
C          Wgdnv(CHF_IX[i;j;k],7) = background(7)
C          Wgdnv(CHF_IX[i;j;k],8) = background(8)

        CHF_ENDDO

        

        return
        end

C
C Set the the boundary flux for a simple fault which is governed by an
C arcsinh friction law with a time-space dependent normal stress.
C
C We need to solve \vec{tau} = \vec{phi}- Zs \vec{V}, where \vec{phi} = (wmxy,wmyz)^T}
C Since V, phi, tau are parallel we solve tau = phi - Zs V (all
C magnitude not vec) then set \vec{tau} = tau \vec{phi}/phi and
C similarly for \vec{V} = V \vec{V}/V
C
C Bracket is formed by (0,phi/Zs)
C
        subroutine VELSLIDENEWTON(
     &    CHF_REAL[vx],
     &    CHF_CONST_REAL[vy],
     &    CHF_REAL[vz],
     &    CHF_REAL[sxy],
     &    CHF_CONST_REAL[syy],
     &    CHF_REAL[syz])

#include "IBCCommon.fh"

        real_t alpha, beta
        real_t phix, phiz, phi
        real_t V,Vmin,Vmax,sn,dV,tau
        real_t dg,g
        real_t atol
        integer i,IMAX

        IMAX = 100
        atol = 1E-6

        phix = sxy + Zs*vx
        phiz = syz + Zs*vz
        phi  = sqrt(phix*phix + phiz*phiz)

        Vmin = 0
        Vmax = phi/Zs
        V    = Vmax / 2.0d0
        sn   = -syy

        alpha = 1
        beta  = 100

        g  = sn * alpha * asinh(beta * V) + Zs * V - phi

        do i = 1,IMAX
            if ( g .lt. 0) then
                Vmin = V
            else
                Vmax = V
            endif

C           evaluate the functions
            dg = sn * alpha * beta / sqrt(beta*beta * V*V + 1) + Zs

C           Guess the change
            dV = -g / dg
            V  = V + dV

C           Verify that we satisfy the bracket
            if ( V .lt. Vmin .or. V .gt. Vmax) then
                V = (Vmin + Vmax) / 2.0d0
            endif

            g  = sn * alpha * asinh(beta * V) + Zs * V - phi
            if ( abs(g) .lt. atol .or. abs(dV) .lt. atol) then
                exit
            endif
        enddo

        tau = sn * alpha * asinh(beta * V)
        sxy = tau * phix / phi
        syz = tau * phiz / phi
        vx  =   V * phix / phi
        vz  =   V * phiz / phi

        return
        end
